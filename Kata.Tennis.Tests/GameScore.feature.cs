// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kata.Tennis.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TennisGameScoreFeature : Xunit.IClassFixture<TennisGameScoreFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GameScore.feature"
#line hidden
        
        public TennisGameScoreFeature(TennisGameScoreFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tennis Game Score", "\tAs a library user\r\n\tI want the score to increase when a player wins a point\r\n\tSo" +
                    " that I can display the current score correctly", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Winning a point changes the score")]
        [Xunit.TraitAttribute("FeatureTitle", "Tennis Game Score")]
        [Xunit.TraitAttribute("Description", "Winning a point changes the score")]
        [Xunit.InlineDataAttribute("0:0", "server", "15:0", new string[0])]
        [Xunit.InlineDataAttribute("15:0", "receiver", "15:15", new string[0])]
        [Xunit.InlineDataAttribute("15:15", "receiver", "15:30", new string[0])]
        [Xunit.InlineDataAttribute("15:30", "server", "30:30", new string[0])]
        [Xunit.InlineDataAttribute("30:30", "server", "40:30", new string[0])]
        [Xunit.InlineDataAttribute("30:40", "server", "40:40", new string[0])]
        [Xunit.InlineDataAttribute("30:0", "server", "40:0", new string[0])]
        [Xunit.InlineDataAttribute("40:0", "server", "server wins!", new string[0])]
        [Xunit.InlineDataAttribute("40:30", "server", "server wins!", new string[0])]
        [Xunit.InlineDataAttribute("15:40", "receiver", "receiver wins!", new string[0])]
        [Xunit.InlineDataAttribute("40:40", "server", "A:40", new string[0])]
        [Xunit.InlineDataAttribute("40:A", "server", "40:40", new string[0])]
        [Xunit.InlineDataAttribute("40:40", "receiver", "40:A", new string[0])]
        [Xunit.InlineDataAttribute("A:40", "receiver", "40:40", new string[0])]
        [Xunit.InlineDataAttribute("A:40", "server", "server wins!", new string[0])]
        [Xunit.InlineDataAttribute("40:A", "receiver", "receiver wins!", new string[0])]
        public virtual void WinningAPointChangesTheScore(string initial_Score, string player, string expected_Score, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Winning a point changes the score", exampleTags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given(string.Format("the score is {0}", initial_Score), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.When(string.Format("the {0} wins the point", player), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then(string.Format("the score is {0}", expected_Score), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TennisGameScoreFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TennisGameScoreFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
